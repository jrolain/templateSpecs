{
	"$schema": "https://schema.management.azure.com/schemas/2021-09-09/uiFormDefinition.schema.json",
	"view": {
		"kind": "Form",
		"properties": {
			"title": "Logic App",
			"steps": [
				{
					"name": "basics",
					"label": "Basics",
					"elements": [
						{
							"name": "introTextBlock",
							"type": "Microsoft.Common.TextBlock",
							"visible": true,
							"options": {
								"text": "Create a logic app, which lets you group workflows as a logical unit for easier management, deployment and sharing of resources. Workflows let you connect your business-critical apps and services with Azure Logic Apps, automating your workflows without writing a single line of code.",
								"link": {
									"label": "Learn more",
									"uri": "https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-overview"
								}
							}
						},
						{
							"name": "cafTextBlock",
							"type": "Microsoft.Common.TextBlock",
							"visible": true,
							"options": {
								"text": "The Cloud Adoption Framework (CAF) specifies some best practices when naming resources. Some customers have chosen to reverse this order of naming elements by placing the resource type at the end of the naming convention. This solution allows you to select the name of most resources, but there are several that are automatically named including Private Endpoints. Select 'Yes' below to ensure the automatically named resources are named with this reverse convention or leave it set to 'No' to follow the CAF.",
								"link": {
									"label": "Learn more",
									"uri": "https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming"
								}
							}
						},
						{
							"name": "nameConvResTypeAtEnd",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Reverse the CAF naming convention.",
							"defaultValue": "No",
							"toolTip": "",
							"constraints": {
								"allowedValues": [
									{
										"label": "Yes",
										"value": true
									},
									{
										"label": "No",
										"value": false
									}
								]
							},
							"visible": true
						},
						{
							"name": "scope",
							"type": "Microsoft.Common.ResourceScope",
							"instanceDetailsLabel": "Logic App Details",
							"location": {
								"resourceTypes": [
									"microsoft.web/sites"
								]
							}
						},
						{
							"name": "name_checkNameAvailability",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "POST",
								"path": "[concat(steps('basics').scope.subscription.id,'/providers/Microsoft.Web/checkNameAvailability?api-version=2022-03-01')]",
								"body": {
									"name": "[steps('basics').logicAppName]",
									"type": "Microsoft.Web/sites"
								}
							}
						},
						{
							"name": "name_rePUT",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('basics').scope.subscription.id,'/resourceGroups/',steps('basics').scope.resourceGroup.name,'/providers/Microsoft.Web/sites/',steps('basics').logicAppName,'?api-version=2022-03-01')]",
								"body": {}
							}
						},
						{
							"name": "logicAppName",
							"type": "Microsoft.Common.TextBox",
							"label": "Logic App Name",
							"placeholder": "logic-<name>-<env>-<region>",
							"toolTip": "Required. The name of the function App. The name must be globally unique for the namespace 'azurewebsites.net'.",
							"constraints": {
								"required": true,
								"validations": [
									{
										"isValid": "[or(steps('basics').name_checkNameAvailability.nameAvailable,equals(steps('basics').name_checkNameAvailability.reason,'AlreadyExists'))]",
										"message": "[steps('basics').name_checkNameAvailability.message]"
									},
									{
										"isValid": "[or(steps('basics').name_checkNameAvailability.nameAvailable,equals(steps('basics').name_rePUT.id,concat(steps('basics').scope.subscription.id,'/resourceGroups/',steps('basics').scope.resourceGroup.name,'/providers/Microsoft.Web/sites/',steps('basics').logicAppName)),not(equals(steps('basics').name_checkNameAvailability.reason,'AlreadyExists')))]",
										"message": "[steps('basics').name_checkNameAvailability.message]"
									}
								]
							},
							"visible": true
						},
						{
							"type": "Microsoft.Common.ResourceGroupSelector",
							"name": "logicAppResourceGroup",
							"label": "Function App Resource Group",
							"placeholder": "rg-<logicAppName>",
							"allowedMode": "Both",
							"required": false,
							"scope": {
								"subscriptionId": "[steps('basics').scope.subscription.subscriptionId]",
								"location": "[steps('basics').scope.location.name]"
							},
							"visible": true
						},
						{
							"name": "plan",
							"type": "Microsoft.Common.Section",
							"label": "Plan",
							"elements": [
								{
									"name": "planTextBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "The plan you choose dictates how your app scales, what features are enabled, and how it is priced.",
										"link": {
											"label": "Learn more",
											"uri": "https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-pricing"
										}
									}
								},
								{
									"name": "type",
									"type": "Microsoft.Common.DropDown",
									"label": "Plan type",
									"multiLine": true,
									"defaultValue": "Standard",
									"toolTip": "Select 'Consumption' for test and other entry-level workloads and 'Standard' for enterprise-level serverless applications.",
									"constraints": {
										"required": false,
										"allowedValues": [
											{
												"label": "Consumption",
												"description": "Best for entry-level. Pay only as much as your workflow runs.",
												"value": "Consumption"
											},
											{
												"label": "Standard",
												"description": "Best for enterprise-level, serverless applications, with event-based scaling and networking isolation.",
												"value": "Standard"
											}
										]
									},
									"visible": true
								},
								{
									"name": "newPlan",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Deploy a new a App Service Plan to host the Logic App.",
									"defaultValue": "No",
									"toolTip": "Select 'No' to use an existing server farm. The plans listed will be limited to those which are compatible with the runtime, operating system, and plan type selected.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										],
										"required": true
									},
									"visible": "[not(equals(steps('basics').plan.type, 'Consumption'))]"
								},
								{
									"name": "serverFarmsApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.Web/serverfarms?api-version=2022-03-01')]"
									}
								},
								{
									"name": "existingServerFarmInfoBox",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(equals(steps('basics').plan.newPlan, false), not(equals(steps('basics').plan.type, 'Consumption')))]",
									"options": {
										"icon": "Info",
										"text": "The list of hosting plans below is filtered based on the location you chose above. If the list is empty, you must create a new plan to create a Logic App with a Standard service plan in this region."
									}
								},
								{
									"name": "existingPlanId",
									"type": "Microsoft.Common.DropDown",
									"label": "Existing App Service Plan",
									"multiLine": true,
									"toolTip": "Select the App Service Plan that will host the Function App.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('basics').plan.serverFarmsApi.value, (item) => and(equals(toLower(replace(item.location, ' ', '')), steps('basics').scope.location.name), equals(item.sku.tier, 'WorkflowStandard'))), (item) => parse(concat('{\"label\":\"', item.name, '\",\"description\":\"location: ', item.location, ' kind: ', item.kind, ' sku: ', item.sku.tier, ' ', item.sku.name, '\",\"value\":\"', item.id, '\"}')))]"
									},
									"visible": "[and(equals(steps('basics').plan.newPlan, false), not(equals(steps('basics').plan.type, 'Consumption')))]"
								},
								{
									"name": "newPlanInfoBox",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(equals(steps('basics').plan.newPlan, true), not(equals(steps('basics').plan.type, 'Consumption')))]",
									"options": {
										"icon": "Info",
										"text": "Enter the name of the new hosting plan and resource group below. The hosting plan and any new networking resources required will be deployed to this resource group."
									}
								},
								{
									"name": "planName",
									"type": "Microsoft.Common.TextBox",
									"label": "App Service Plan name",
									"placeholder": "asp-logic-<sku>-<env>-<region>",
									"toolTip": "The name of the app service plan used by the function App.",
									"constraints": {
										"required": true,
										"regex": "^[0-9a-zA-Z-\\p{L}]{1,60}$",
										"validationMessage": ""
									},
									"visible": "[and(equals(steps('basics').plan.newPlan, true), not(equals(steps('basics').plan.type, 'Consumption')))]"
								},
								{
									"type": "Microsoft.Common.ResourceGroupSelector",
									"name": "planResourceGroup",
									"allowedMode": "Both",
									"placeholder": "rg-<planName> or rg-hosting-plans-<env>-<region>",
									"required": false,
									"defaultValue": "[steps('basics').logicAppResourceGroup.value.name]",
									"scope": {
										"subscriptionId": "[steps('basics').scope.subscription.subscriptionId]",
										"location": "[steps('basics').scope.location.name]"
									},
									"visible": "[and(equals(steps('basics').plan.newPlan, true), not(equals(steps('basics').plan.type, 'Consumption')))]"
								},
								{
									"name": "planPricing",
									"type": "Microsoft.Common.DropDown",
									"label": "App Service Plan pricing",
									"multiLine": true,
									"defaultValue": "Elastic Premium EP1",
									"toolTip": "Select the hosting plan pricing",
									"constraints": {
										"required": false,
										"allowedValues": [
											{
												"label": "Workflow Standard WS1",
												"value": "WorkflowStandard_WS1"
											},
											{
												"label": "Workflow Standard WS2",
												"value": "WorkflowStandard_WS2"
											},
											{
												"label": "Workflow Standard WS3",
												"value": "WorkflowStandard_WS3"
											}
										]
									},
									"visible": "[and(equals(steps('basics').plan.newPlan, true), not(equals(steps('basics').plan.type, 'Consumption')))]"
								},
								{
									"name": "geoRegionsApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id,'/providers/Microsoft.Web/geoRegions?api-version=2022-03-01')]"
									}
								},
								{
									"name": "zoneRedundancyTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(equals(steps('basics').plan.newPlan, true), equals(steps('basics').plan.type, 'Standard'), contains(first(map(filter(steps('basics').plan.geoRegionsApi.value, (item) => equals(toLower(replace(item.name, ' ', '')), steps('basics').scope.location.name)), (item) => item.properties.orgDomain)), 'ZONEREDUNDANCY'))]",
									"options": {
										"text": "An App Service Plan can be deployed as a zone redundant service in the regions that support it. This is a deployment time only decision. You can't make an App Service Plan zone redundant after it has been deployed.",
										"link": {
											"label": "Learn more",
											"uri": "https://go.microsoft.com/fwlink/?linkid=2181427"
										}
									}
								},
								{
									"name": "zoneRedundant",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Zone redundancy",
									"defaultValue": "Disabled: Your App Service Plan and the apps in it will not be zone redundant. The minimum App Service plan instance count will be one.",
									"toolTip": "",
									"constraints": {
										"allowedValues": [
											{
												"label": "Enabled: Your App Service plan and the apps in it will be zone redundant. The minimum App Service plan instance count will be three.",
												"value": true
											},
											{
												"label": "Disabled: Your App Service Plan and the apps in it will not be zone redundant. The minimum App Service plan instance count will be one.",
												"value": false
											}
										]
									},
									"visible": "[and(or(equals(steps('basics').plan.newPlan, true), equals(steps('basics').plan.type, 'Consumption')), contains(first(map(filter(steps('basics').plan.geoRegionsApi.value, (item) => equals(toLower(replace(item.name, ' ', '')), steps('basics').scope.location.name)), (item) => item.properties.orgDomain)), 'ZONEREDUNDANCY'))]"
								}
							],
							"visible": true
						}
					]
				},
				{
					"name": "storage",
					"label": "Storage",
					"elements": [
						{
							"name": "storageApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('basics').scope.subscription.id,'/providers/Microsoft.Storage/resourceTypes?api-version=2021-04-01')]"
							}
						},
						{
							"name": "name_checkNameAvailability",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "POST",
								"path": "[concat(steps('basics').scope.subscription.id,'/providers/Microsoft.Storage/checkNameAvailability?api-version=2016-01-01')]",
								"body": {
									"name": "[steps('storage').name]",
									"type": "Microsoft.Storage/storageAccounts"
								}
							}
						},
						{
							"name": "name_rePUT",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('basics').scope.subscription.id,'/resourceGroups/',steps('basics').scope.resourceGroup.name,'/providers/Microsoft.Storage/storageAccounts/',steps('storage').name,'?api-version=2016-01-01')]",
								"body": {}
							}
						},
						{
							"name": "storageTextBlock",
							"type": "Microsoft.Common.TextBlock",
							"visible": "[equals(steps('basics').plan.type, 'Standard')]",
							"options": {
								"text": "When creating a logic app, you must create or link to a general-purpose Azure Storage account that supports Blobs, Queue, and Table storage.",
								"link": {
									"label": "Learn more",
									"uri": "https://go.microsoft.com/fwlink/?linkid=2249771"
								}
							}
						},
						{
							"name": "name",
							"type": "Microsoft.Common.TextBox",
							"label": "Storage Account Name",
							"defaultValue": "[toLower(replace(replace(steps('basics').logicAppName, 'func-', 'st'), '-', ''))]",
							"toolTip": "Required. Name of the Storage Account.",
							"constraints": {
								"required": true,
								"validations": [
									{
										"isValid": "[or(steps('storage').name_checkNameAvailability.nameAvailable,equals(steps('storage').name_checkNameAvailability.reason,'AlreadyExists'))]",
										"message": "[steps('storage').name_checkNameAvailability.message]"
									},
									{
										"isValid": "[or(steps('storage').name_checkNameAvailability.nameAvailable,equals(steps('storage').name_rePUT.id,concat(steps('basics').scope.subscription.id,'/resourceGroups/',steps('basics').scope.resourceGroup.name,'/providers/Microsoft.Storage/storageAccounts/',steps('storage').name)),not(equals(steps('storage').name_checkNameAvailability.reason,'AlreadyExists')))]",
										"message": "[steps('storage').name_checkNameAvailability.message]"
									}
								]
							},
							"visible": "[equals(steps('basics').plan.type, 'Standard')]"
						},
						{
							"name": "notApplicableTextBlock",
							"type": "Microsoft.Common.TextBlock",
							"visible": "[equals(steps('basics').plan.type, 'Consumption')]",
							"options": {
								"text": "When creating a logic app with a Consumption based plan, no storage accounts are deployed."
							}
						}
					]
				},
				{
					"name": "networking",
					"label": "Networking",
					"elements": [
						{
							"name": "subscriptionsApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "/subscriptions?api-version=2022-12-01"
							}
						},
						{
							"name": "faPrivateDnsZonesApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('networking').inboundAccess.PrivateDNSZonesSubscription, '/providers/Microsoft.Network/privateDnsZones?api-version=2018-09-01')]"
							}
						},
						{
							"name": "saPrivateDnsZonesApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('networking').storagePrivateEndpoints.PrivateDNSZonesSubscription, '/providers/Microsoft.Network/privateDnsZones?api-version=2018-09-01')]"
							}
						},
						{
							"name": "virtualNetworksApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('networking').virtualNetwork.networksSubscription, '/providers/Microsoft.Network/virtualNetworks?api-version=2022-11-01')]"
							}
						},
						{
							"name": "subnetsApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('networking').virtualNetwork.virtualNetwork, '/subnets?api-version=2022-05-01')]"
							}
						},
						{
							"name": "networkingTextBlock1",
							"type": "Microsoft.Common.TextBlock",
							"visible": "[equals(steps('basics').plan.type, 'Standard')]",
							"options": {
								"text": "Logic Apps can be provisioned with the inbound address being public to the internet or isolated to an Azure virtual network. Logic Apps can also be provisioned with outbound traffic able to reach endpoints in a virtual network, be governed by network security groups or affected by virtual network routes. By default, your app is open to the internet and cannot reach into a virtual network. These aspects can also be changed after the app is provisioned.",
								"link": {
									"label": "Learn more",
									"uri": "https://go.microsoft.com/fwlink/?linkid=2157533"
								}
							}
						},
						{
							"name": "publicAccess",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Enable public access",
							"visible": "[equals(steps('basics').plan.type, 'Standard')]",
							"defaultValue": "On",
							"toolTip": "Public access is applied to both main site and advanced tool site. Deny public network access will block all incoming traffic except that comes from private endpoints.",
							"constraints": {
								"required": false,
								"allowedValues": [
									{
										"label": "On",
										"value": true
									},
									{
										"label": "Off",
										"value": false
									}
								]
							}
						},
						{
							"name": "networkInjection",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Enable network integration",
							"defaultValue": "Yes",
							"toolTip": "Allows your function app to attach to and/or access resources inside a virtual network.",
							"constraints": {
								"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										]
							},
							"visible": "[equals(steps('basics').plan.type, 'Standard')]"
						},
						{
							"name": "virtualNetwork",
							"type": "Microsoft.Common.Section",
							"label": "Virtual Network",
							"elements": [
								{
									"name": "newVNet",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Deploy a new Virtual Network",
									"defaultValue": "[if(steps('basics').plan.newPlan, 'Yes', 'No')]",
									"toolTip": "Choose 'Yes' to deploy a new virtual network for network injection/integration.",
									"constraints": {
										"allowedValues": "[if(steps('basics').plan.newPlan, parse('[{\"label\":\"Yes\",\"value\":true},{\"label\":\"No\",\"value\":false}]'), parse('[{\"label\":\"No\",\"value\":false}]'))]"
									},
									"visible": true
								},
								{
									"name": "existingVNetExistingASPTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(equals(steps('basics').plan.newPlan, false), equals(steps('networking').virtualNetwork.newVNet, false))]",
									"options": {
										"text": "[concat('Select the subscription and then the virtual network to which the existing App Service Plan (', last(split(steps('basics').plan.existingPlanId, '/')) ,') is already associated. You can find this information in the Networking | Virtual Networking Integration section of the App Service Plan.')]"
									}
								},
								{
									"name": "existingVNetNewASPTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('basics').plan.newPlan, equals(steps('networking').virtualNetwork.newVNet, false))]",
									"options": {
										"text": "Select the subscription and then the virtual network to which the new App Service Plan will be linked. The network listed must have a subnet delegated to 'Microsoft.Web/serverFarms' but not associated with an existing App Service Plan."
									}
								},
								{
									"name": "networksSubscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Virtual Networks Subscription",
									"placeholder": "",
									"defaultValue": "[steps('basics').scope.subscription.displayName]",
									"toolTip": "",
									"constraints": {
										"allowedValues": "[map(steps('networking').subscriptionsApi.value, (item) => parse(concat('{\"label\":\"', item.displayName, '\",\"value\":\"', item.id, '\"}')))]",
										"required": true
									},
									"visible": "[equals(steps('networking').virtualNetwork.newVNet, false)]"
								},
								{
									"name": "virtualNetwork",
									"type": "Microsoft.Common.DropDown",
									"label": "Virtual Network",
									"multiLine": true,
									"toolTip": "Select the virtual network to which the function app will be integrated. All subnet selections below will be limited to this Virtual Network.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').virtualNetworksApi.value, (item) => equals(item.location, steps('basics').scope.location.name)), (item) => parse(concat('{\"label\":\"', item.name, '\",\"description\":\"Resource group: ', first(skip(split(item.id, '/'), 4)), '\",\"value\":\"', item.id, '\"}')))]"
									},
									"visible": "[equals(steps('networking').virtualNetwork.newVNet, false)]"
								},
								{
									"name": "newVNetTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[equals(steps('networking').virtualNetwork.newVNet, true)]",
									"options": {
										"text": "Specify the virtual network name, resource group, and virtual network address prefix to which the function app and new service plan will be integrated. All networking resources will be deployed to this resource group. Naming of the virtual network and resource group could be based on a shared model or specific to the app service plan deployed via this solution."
									}
								},
								{
									"name": "vnetName",
									"type": "Microsoft.Common.TextBox",
									"label": "Virtual Network Name",
									"subLabel": "",
									"placeholder": "vnet-logicapps-<env>-<region>",
									"toolTip": "Specify the name of the new Virtual Network to create for Logic App Virtual Network Integration. This vnet and associated resources will be deployed to the resource group selected in the 'Plan' section of the 'Basics' blade.",
									"constraints": {
										"required": false,
										"regex": "^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,62}[a-zA-Z0-9_]?$",
										"validationMessage": "String value must be between 2 and 64 characters long, consist of only alphanumeric characters, underscores, periods, and hyphens. It must also start with an alphanumeric character and end with alphanumeric character or underscore."
									},
									"visible": "[steps('networking').virtualNetwork.newVNet]"
								},
								{
									"type": "Microsoft.Common.ResourceGroupSelector",
									"name": "networkingResourceGroup",
									"allowedMode": "Both",
									"placeholder": "<hosting plan rg name> or rg-app-service-plans-networking-<env>-<region>",
									"required": false,
									"label": "Networking Resource Group",
									"defaultValue": "[steps('basics').plan.planResourceGroup.value.name]",
									"scope": {
										"subscriptionId": "[steps('basics').scope.subscription.subscriptionId]",
										"location": "[steps('basics').scope.location.name]"
									},
									"visible": "[steps('networking').virtualNetwork.newVNet]"
								},
								{
									"name": "vnetAddressPrefix",
									"type": "Microsoft.Common.TextBox",
									"label": "Vnet Address Prefix",
									"subLabel": "",
									"defaultValue": "10.0.0.0/16",
									"toolTip": "The address prefix of the virtual network used Virtual Network Integration provided in CIDR notation.",
									"constraints": {
										"required": false,
										"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(1[0-9]|2[0-6]))$",
										"validationMessage": "Invalid CIDR range. The address prefix must be in the range [10,26]."
									},
									"visible": "[steps('networking').virtualNetwork.newVNet]"
								}
							],
							"visible": "[and(equals(steps('basics').plan.type, 'Standard'), steps('networking').networkInjection)]"
						},
						{
							"name": "inboundAccess",
							"type": "Microsoft.Common.Section",
							"label": "Inbound access",
							"elements": [
								{
									"name": "infoBox1",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[steps('networking').publicAccess]",
									"options": {
										"icon": "Warning",
										"text": "Private endpoints are disabled if public internet access is enabled."
									}
								},
								{
									"name": "enablePE",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Enable private endpoints",
									"defaultValue": "[if(steps('networking').publicAccess, 'No', 'Yes')]",
									"toolTip": "Choose 'Yes' to enable private endpoints for the inbound access to the Function App.",
									"constraints": {
										"allowedValues": "[if(steps('networking').publicAccess, parse('[{\"label\":\"No\",\"value\":false}]'), parse('[{\"label\":\"Yes\",\"value\":true},{\"label\":\"No\",\"value\":false}]'))]"
									},
									"visible": true
								},
								{
									"name": "subnetName",
									"type": "Microsoft.Common.TextBox",
									"label": "Inbound subnet name",
									"placeholder": "",
									"defaultValue": "snet-func-apps-inbound",
									"toolTip": "Provide the name of the inbound subnet",
									"constraints": {
										"required": true,
										"regex": "^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,78}[a-zA-Z0-9_]$",
										"validationMessage": "Must be 2-80 characters long containing only alphanumeric characters, underscores, and hyphens. The first character must be an alphanumeric and the last an alphanumeric or underscore."
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').inboundAccess.enablePE)]"
								},
								{
									"name": "snetAddressPrefix",
									"type": "Microsoft.Common.TextBox",
									"label": "Subnet Address Prefix",
									"subLabel": "",
									"defaultValue": "10.0.0.0/24",
									"toolTip": "[concat('Provide the address prefix of the subnet used for inbound access in CIDR notation. The address range must be within the address range - ', steps('networking').virtualNetwork.vnetAddressPrefix)]",
									"constraints": {
										"required": false,
										"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(1[0-9]|2[0-6]))$",
										"validationMessage": "Invalid CIDR range. The address prefix must be in the range [10,26]."
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').inboundAccess.enablePE)]"
								},
								{
									"name": "snetTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(equals(steps('networking').newVNet, false), steps('networking').inboundAccess.enablePE)]",
									"options": {
										"text": "Select a subnet in the chosen virtual network to which a private endpoint will be attached. Private endpoints enable secure inbound access from only the chosen virtual network. When enabled, your app will not be accessible from the internet. The list of subnets is filtered to only those that do not have service delegations and private endpoint network policies are disabled."
									}
								},
								{
									"name": "peSubnet",
									"type": "Microsoft.Common.DropDown",
									"label": "Inbound subnet",
									"toolTip": "Select an existing subnet for the private Endpoints.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').subnetsApi.value, (item) => and(empty(item.properties.delegations), equals(item.properties.privateEndpointNetworkPolicies, 'Disabled'))), (item) => parse(concat('{\"label\":\"', item.name, '\",\"value\":\"', item.id, '\"}')))]"
									},
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').inboundAccess.enablePE)]"
								},
								{
									"name": "privateDNSInfoBox",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').inboundAccess.enablePE)]",
									"options": {
										"icon": "Info",
										"text": "With the use of Private Endpoints, the environment-specific 'azurewebsites' Private DNS zone will be created and linked to the new Virtual Network."
									}
								},
								{
									"name": "enablePrivateDNS",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "DNS",
									"defaultValue": "Azure Private DNS Zone",
									"toolTip": "Choose 'Azure Private DNS Zone' to register the private endpoints with Azure Private DNS Zones. If you are deploying a new virtual network, a new Private DNS Zone will be created in the Network resource group chosen above.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Azure Private DNS Zone",
												"value": true
											},
											{
												"label": "Manual: I will provide my own custom DNS solution.",
												"value": false
											}
										]
									},
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').inboundAccess.enablePE)]"
								},
								{
									"name": "PrivateDNSZonesSubscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Private DNS Zones Subscription",
									"placeholder": "",
									"defaultValue": "[steps('basics').scope.subscription.displayName]",
									"toolTip": "Pick the subscription containing the Azure Private DNS Zones",
									"constraints": {
										"allowedValues": "[map(steps('networking').subscriptionsApi.value, (item) => parse(concat('{\"label\":\"', item.displayName, '\",\"value\":\"', item.id, '\"}')))]",
										"required": true
									},
									"visible": "[and(steps('networking').inboundAccess.enablePrivateDNS, equals(steps('networking').virtualNetwork.newVNet, false))]"
								},
								{
									"name": "privateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(steps('networking').inboundAccess.enablePrivateDNS, equals(steps('networking').virtualNetwork.newVNet, false))]",
									"label": "Private DNS Zone",
									"defaultValue": "",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Logic Apps.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').faPrivateDnsZonesApi.value, (item) => contains(item.name, 'privatelink.azurewebsites.')), (item) => parse(concat('{\"label\":\"', item.name, '\",\"description\":\"Resource group: ', first(skip(split(item.id, '/'), 4)), '\",\"value\":\"', item.id, '\"}')))]"
									}
								}
							],
							"visible": "[and(equals(steps('basics').plan.type, 'Standard'), steps('networking').networkInjection)]"
						},
						{
							"name": "outboundAccess",
							"type": "Microsoft.Common.Section",
							"label": "Outbound access",
							"elements": [
								{
									"name": "enableVnetIntegration",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Enable VNet Integration",
									"defaultValue": "Yes",
									"toolTip": "Choose 'Yes' to  enables your app to make calls into a virtual network.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										]
									},
									"visible": true
								},
								{
									"name": "subnetName",
									"type": "Microsoft.Common.TextBox",
									"label": "Outbound subnet name",
									"placeholder": "",
									"defaultValue": "[concat('snet-', steps('basics').plan.planName, '-outbound')]",
									"toolTip": "Provide the name of the outbound subnet",
									"constraints": {
										"required": true,
										"regex": "^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,78}[a-zA-Z0-9_]$",
										"validationMessage": "Must be 2-80 characters long containing only alphanumeric characters, underscores, and hyphens. The first character must be an alphanumeric and the last an alphanumeric or underscore."
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').outboundAccess.enableVnetIntegration)]"
								},
								{
									"name": "snetAddressPrefix",
									"type": "Microsoft.Common.TextBox",
									"label": "Subnet Address Prefix",
									"subLabel": "",
									"defaultValue": "10.0.1.0/24",
									"toolTip": "[concat('Provide the address prefix of the subnet used for outbound access in CIDR notation. The address range must be within the address range - ', steps('networking').virtualNetwork.vnetAddressPrefix)]",
									"constraints": {
										"required": false,
										"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(1[0-9]|2[0-6]))$",
										"validationMessage": "Invalid CIDR range. The address prefix must be in the range [10,26]."
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').outboundAccess.enableVnetIntegration)]"
								},
								{
									"name": "snetExistingAspTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"options": {
										"text": "Select the subnet in the chosen virtual network to be used for integration. VNet Integration enables your app to make calls into the chosen virtual network. You can also put network security groups or route tables on this subnet to control all outbound traffic from your function app. The list of subnets is automatically filtered to only those delegated and linked to the app service plan specified on the basics page."
									},
									"visible": "[and(equals(steps('basics').plan.newPlan, false), equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').outboundAccess.enableVnetIntegration)]"
								},
								{
									"name": "wrongVnetExistingAspErrorBox",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(equals(steps('basics').plan.newPlan, false), not(empty(steps('networking').virtualNetwork.virtualNetwork)), empty(map(filter(steps('networking').subnetsApi.value, (item) => equals(first(map(item.properties.serviceAssociationLinks, (item) => item.properties.link)), steps('basics').plan.existingPlanId)), (item) => parse(concat('{\"label\":\"', item.name, '\"}')))))]",
									"options": {
										"icon": "Error",
										"text": "There are no subnets in the virtual network chosen above that have a link to the existing app service plan chosen on the 'Basics' page. Either select a different virtual network above, a different hosting plan on the 'Basics' page, or choose to deploy a new App Service Plan."
									}
								},
								{
									"name": "noSNetsWithDelegationErrorBox",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(steps('basics').plan.newPlan, not(empty(steps('networking').virtualNetwork.virtualNetwork)), empty(map(filter(filter(steps('networking').subnetsApi.value, (snet) => empty(snet.properties.serviceAssociationLinks)), (snet) => equals(first(map(snet.properties.delegations, (del) => del.properties.serviceName)), 'Microsoft.Web/serverFarms')), (item) => item.name)))]",
									"options": {
										"icon": "Error",
										"text": "There are no subnets in the virtual network chosen above that are delegated to the 'Microsoft.Web/serverFarms' service and are not already linked to an App Service Plan. You must either select another network, select the option to create a new virtual network, or create a subnet in the chosen virtual network, delegate it to 'Microsoft.Web/serverFarms', and then restart this deployment."
									}
								},
								{
									"name": "outboundSubnet",
									"type": "Microsoft.Common.DropDown",
									"label": "Outbound subnet",
									"defaultValue": "[map(filter(steps('networking').subnetsApi.value, (item) => equals(first(map(item.properties.serviceAssociationLinks, (item) => item.properties.link)), steps('basics').plan.existingPlanId)), (item) => item.name)]",
									"toolTip": "Select an existing subnet for outbound access.",
									"constraints": {
										"required": true,
										"allowedValues": "[if(equals(steps('basics').plan.newPlan, false), map(filter(steps('networking').subnetsApi.value, (item) => equals(first(map(item.properties.serviceAssociationLinks, (item) => item.properties.link)), steps('basics').plan.existingPlanId)), (item) => parse(concat('{\"label\":\"', item.name, '\",\"value\":\"', item.id, '\"}'))), map(filter(filter(steps('networking').subnetsApi.value, (snet) => empty(snet.properties.serviceAssociationLinks)), (snet) => equals(first(map(snet.properties.delegations, (del) => del.properties.serviceName)), 'Microsoft.Web/serverFarms')), (item) => parse(concat('{\"label\":\"', item.name, '\",\"value\":\"', item.id, '\"}'))))]"
									},
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').outboundAccess.enableVnetIntegration)]"
								}
							],
							"visible": "[and(equals(steps('basics').plan.type, 'Standard'), steps('networking').networkInjection)]"
						},
						{
							"name": "storagePrivateEndpoints",
							"type": "Microsoft.Common.Section",
							"label": "Storage Private Endpoints",
							"elements": [
								{
									"name": "textBlock1",
									"type": "Microsoft.Common.TextBlock",
									"options": {
										"text": "Configure private endpoints on your storage account to have tighter control over inbound traffic."
									}
								},
								{
									"name": "enablePE",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Add storage private endpoints",
									"defaultValue": "Yes",
									"toolTip": "Choose 'Yes' to enable private endpoints on the storage account to have tighter control over inbound traffic.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										]
									}
								},
								{
									"name": "subnetName",
									"type": "Microsoft.Common.TextBox",
									"label": "Storage account subnet name",
									"placeholder": "",
									"defaultValue": "snet-function-apps-storage",
									"toolTip": "Provide the name of the storage account private endpoint subnet",
									"constraints": {
										"required": true,
										"regex": "^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,78}[a-zA-Z0-9_]$",
										"validationMessage": "Must be 2-80 characters long containing only alphanumeric characters, underscores, and hyphens. The first character must be an alphanumeric and the last an alphanumeric or underscore."
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').storagePrivateEndpoints.enablePE)]"
								},
								{
									"name": "snetAddressPrefix",
									"type": "Microsoft.Common.TextBox",
									"label": "Subnet Address Prefix",
									"subLabel": "",
									"defaultValue": "10.0.2.0/24",
									"toolTip": "[concat('Provide the address prefix of the subnet used for inbound access in CIDR notation. The address range must be within the address range - ', steps('networking').virtualNetwork.vnetAddressPrefix)]",
									"constraints": {
										"required": false,
										"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(1[0-9]|2[0-6]))$",
										"validationMessage": "Invalid CIDR range. The address prefix must be in the range [10,26]."
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').storagePrivateEndpoints.enablePE)]"
								},
								{
									"name": "privateDNSInfoBox",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').storagePrivateEndpoints.enablePE)]",
									"options": {
										"icon": "Info",
										"text": "With the use of Private Endpoints, the environment-specific storage account 'blob', 'file', 'queue', and 'table' Private DNS zones will be created and linked to the new Virtual Network."
									}
								},
								{
									"name": "snetTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE)]",
									"options": {
										"text": "Select a subnet in the chosen virtual network to place the storage account private endpoints. The subnet list is automatically filtered to only those that do not have a delegation."
									}
								},
								{
									"name": "peSubnet",
									"type": "Microsoft.Common.DropDown",
									"label": "Private endpoint subnet",
									"toolTip": "Select an existing subnet for the storage account private endpoints.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').subnetsApi.value, (item) => and(empty(item.properties.delegations), equals(item.properties.privateEndpointNetworkPolicies, 'Disabled'))), (item) => parse(concat('{\"label\":\"', item.name, '\",\"value\":\"', item.id, '\"}')))]"
									},
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE)]"
								},
								{
									"name": "enablePrivateDNS",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "DNS",
									"defaultValue": "Azure Private DNS Zone",
									"toolTip": "Choose 'Azure Private DNS Zone' to register the private endpoints with Azure Private DNS Zones.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Azure Private DNS Zone",
												"value": true
											},
											{
												"label": "Manual: I will provide my own custom DNS solution.",
												"value": false
											}
										]
									},
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE)]"
								},
								{
									"name": "PrivateDNSZonesSubscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Private DNS Zones Subscription",
									"placeholder": "",
									"defaultValue": "[steps('basics').scope.subscription.displayName]",
									"toolTip": "Pick the subscription containing the Azure Private DNS Zones",
									"constraints": {
										"allowedValues": "[map(steps('networking').subscriptionsApi.value, (item) => parse(concat('{\"label\":\"', item.displayName, '\",\"value\":\"', item.id, '\"}')))]",
										"required": true
									},
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS)]"
								},
								{
									"name": "blobPrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS)]",
									"label": "Storage blobs private DNS zone",
									"defaultValue": "",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Blobs.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').saPrivateDnsZonesApi.value, (item) => contains(item.name, 'privatelink.blob.')), (item) => parse(concat('{\"label\":\"', item.name, '\",\"description\":\"Resource group: ', first(skip(split(item.id, '/'), 4)), '\",\"value\":\"', item.id, '\"}')))]"
									}
								},
								{
									"name": "filePrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS)]",
									"label": "Storage files private DNS zone",
									"defaultValue": "",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Files.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').saPrivateDnsZonesApi.value, (item) => contains(item.name, 'privatelink.file.')), (item) => parse(concat('{\"label\":\"', item.name, '\",\"description\":\"Resource group: ', first(skip(split(item.id, '/'), 4)), '\",\"value\":\"', item.id, '\"}')))]"
									}
								},
								{
									"name": "queuePrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS)]",
									"label": "Storage queues private DNS zone",
									"defaultValue": "",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Queues.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').saPrivateDnsZonesApi.value, (item) => contains(item.name, 'privatelink.queue.')), (item) => parse(concat('{\"label\":\"', item.name, '\",\"description\":\"Resource group: ', first(skip(split(item.id, '/'), 4)), '\",\"value\":\"', item.id, '\"}')))]"
									}
								},
								{
									"name": "tablePrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS)]",
									"label": "Storage tables private DNS zone",
									"defaultValue": "",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Tables.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').saPrivateDnsZonesApi.value, (item) => contains(item.name, 'privatelink.table.')), (item) => parse(concat('{\"label\":\"', item.name, '\",\"description\":\"Resource group: ', first(skip(split(item.id, '/'), 4)), '\",\"value\":\"', item.id, '\"}')))]"
									}
								}
							],
							"visible": "[and(equals(steps('basics').plan.type, 'Standard'), steps('networking').networkInjection, steps('networking').outboundAccess.enableVnetIntegration)]"
						},
						{
							"name": "notApplicableTextBlock",
							"type": "Microsoft.Common.TextBlock",
							"visible": "[equals(steps('basics').plan.type, 'Consumption')]",
							"options": {
								"text": "When creating a logic app with a Consumption based plan, no networking resources are deployed."
							}
						}
					]
				},
				{
					"name": "monitoring",
					"label": "Monitoring",
					"elements": [
						{
							"name": "diagnostics",
							"type": "Microsoft.Common.Section",
							"label": "Diagnostics",
							"elements": [
								{
									"name": "textBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "Most resources in Azure have the ability to send diagnostic log and metrics to a log analytic workspace for retrieval and analysis. To enable diagnostic collection from the resources deployed, select the log analytics workspace below. Leave it empty to disable log and metric collection."
									}
								},
								{
									"name": "enableDiagnostics",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Enable Diagnostic Settings",
									"defaultValue": "Yes",
									"toolTip": "Choose 'Yes' to enable diagnostic settings.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										]
									}
								},
								{
									"name": "logAnalyticsWorkspace",
									"type": "Microsoft.Solutions.ResourceSelector",
									"label": "Log Analytics Workspace",
									"resourceType": "Microsoft.OperationalInsights/workspaces",
									"toolTip": "The log analytics workspace to where diagnostic logs are sent.",
									"visible": "[steps('monitoring').diagnostics.enableDiagnostics]"
								}
							],
							"visible": "[equals(steps('basics').plan.type, 'Standard')]"
						},
						{
							"name": "appInsights",
							"type": "Microsoft.Common.Section",
							"label": "Application Insights",
							"elements": [
								{
									"name": "textBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "Azure Monitor application insights is an Application Performance Management (APM) service for developers and DevOps professionals. Enable it below to automatically monitor your application. It will detect performance anomalies, and includes powerful analytics tools to help you diagnose issues and to understand what users actually do with your app. Your bill is based on amount of data used by Application Insights and your data retention settings.",
										"link": {
											"label": "Learn more",
											"uri": "https://go.microsoft.com/fwlink/?linkid=2087013"
										}
									}
								},
								{
									"name": "enableApplicationInsights",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Enable Application Insights",
									"defaultValue": "Yes",
									"toolTip": "Choose 'Yes' to enable application insights.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										]
									}
								}
							],
							"visible": "[equals(steps('basics').plan.type, 'Standard')]"
						},
						{
							"name": "notApplicableTextBlock",
							"type": "Microsoft.Common.TextBlock",
							"visible": "[equals(steps('basics').plan.type, 'Consumption')]",
							"options": {
								"text": "When creating a logic app with a Consumption based plan, no monitoring resources are deployed."
							}
						}
					]
				},
				{
					"name": "tags",
					"label": "Tags",
					"elements": [
						{
							"name": "tags",
							"type": "Microsoft.Common.TagsByResource",
							"resources": "[if(equals(steps('basics').plan.type, 'Consumption'), parse('[\"Microsoft.Logic/workFlows\"]'), parse('[\"Microsoft.Insights/components\",\"Microsoft.Network/privateEndpoints\",\"Microsoft.Network/privateDnsZones\",\"Microsoft.Network/virtualNetworks\",\"Microsoft.Storage/storageAccounts\",\"Microsoft.Web/sites\",\"Microsoft.Web/serverFarms\"]'))]"
						}
					]
				}
			]
		},
		"outputs": {
			"kind": "Subscription",
			"location": "[steps('basics').scope.location.name]",
			"subscriptionId": "[steps('basics').scope.subscription.id]",
			"parameters": {
				"location": "[steps('basics').scope.location.name]",
				"nameConvResTypeAtEnd": "[bool(steps('basics').nameConvResTypeAtEnd)]",
				"logicAppName": "[steps('basics').logicAppName]",
				"logicAppResourceGroupName": "[steps('basics').logicAppResourceGroup.value.name]",
				"deployPlan": "[if(equals(steps('basics').plan.type, 'Consumption'), false, steps('basics').plan.newPlan)]",
				"planType": "[steps('basics').plan.type]",
				"planId": "[if(steps('basics').plan.newPlan, '', steps('basics').plan.existingPlanId)]",
				"planName": "[if(steps('basics').plan.newPlan, steps('basics').plan.planName, '')]",
				"planResourceGroupName": "[if(steps('basics').plan.newPlan, steps('basics').plan.planResourceGroup.value.name, '')]",
				"planPricing": "[if(steps('basics').plan.newPlan, steps('basics').plan.planPricing, 'WorkflowStandard_WS1')]",
				"planZoneRedundant": "[if(steps('basics').plan.newPlan, steps('basics').plan.zoneRedundant, false)]",
				"storageAccountName": "[if(equals(steps('basics').plan.type, 'Consumption'), '', steps('storage').name)]",
				"enablePublicAccess": "[if(equals(steps('basics').plan.type, 'Consumption'), false, steps('networking').publicAccess)]",
				"deployNetworking": "[if(steps('networking').networkInjection, steps('networking').virtualNetwork.newVNet, false)]",
				"enableInboundPrivateEndpoint": "[if(equals(steps('basics').plan.type, 'Consumption'), false, steps('networking').inboundAccess.enablePE)]",
				"enableVnetIntegration": "[if(and(equals(steps('basics').plan.type, 'Standard'), steps('networking').networkInjection), steps('networking').outboundAccess.enableVnetIntegration, false)]",
				"logicAppInboundSubnetId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').inboundAccess.enablePE), steps('networking').inboundAccess.peSubnet, '')]",
				"logicAppOutboundSubnetId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').outboundAccess.enableVnetIntegration), steps('networking').outboundAccess.outboundSubnet, '')]",
				"enableStoragePrivateEndpoints": "[if(and(steps('networking').networkInjection, steps('networking').outboundAccess.enableVnetIntegration), steps('networking').storagePrivateEndpoints.enablePE, false)]",
				"storagePrivateEndpointSubnetId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE), steps('networking').storagePrivateEndpoints.peSubnet, '')]",
				"vnetName": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').networkInjection), steps('networking').virtualNetwork.vnetName, '')]",
				"networkingResourceGroupName": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').networkInjection), steps('networking').virtualNetwork.networkingResourceGroup.value.name, '')]",
				"vnetAddressPrefix": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').networkInjection), steps('networking').virtualNetwork.vnetAddressPrefix, '')]",
				"logicAppInboundSubnetName": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').inboundAccess.enablePE), steps('networking').inboundAccess.subnetName, '')]",
				"logicAppInboundSubnetAddressPrefix": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').inboundAccess.enablePE), steps('networking').inboundAccess.snetAddressPrefix, '')]",
				"logicAppOutboundSubnetName": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').outboundAccess.enableVnetIntegration), steps('networking').outboundAccess.subnetName, '')]",
				"logicAppOutboundSubnetAddressPrefix": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').outboundAccess.enableVnetIntegration), steps('networking').outboundAccess.snetAddressPrefix, '')]",
				"storagePrivateEndpointSubnetName": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').storagePrivateEndpoints.enablePE), steps('networking').storagePrivateEndpoints.subnetName, '')]",
				"storagePrivateEndpointSubnetAddressPrefix": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').storagePrivateEndpoints.enablePE), steps('networking').storagePrivateEndpoints.snetAddressPrefix, '')]",
				"logicAppPrivateDnsZoneId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), equals(steps('networking').publicAccess, false), steps('networking').inboundAccess.enablePE, steps('networking').inboundAccess.enablePrivateDNS), steps('networking').inboundAccess.privateDnsZone, '')]",
				"storageBlobDnsZoneId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS), steps('networking').storagePrivateEndpoints.blobPrivateDnsZone, '')]",
				"storageFileDnsZoneId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS), steps('networking').storagePrivateEndpoints.filePrivateDnsZone, '')]",
				"storageQueueDnsZoneId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS), steps('networking').storagePrivateEndpoints.queuePrivateDnsZone, '')]",
				"storageTableDnsZoneId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS), steps('networking').storagePrivateEndpoints.tablePrivateDnsZone, '')]",
				"logAnalyticsWorkspaceId": "[if(steps('monitoring').diagnostics.enableDiagnostics, steps('monitoring').diagnostics.logAnalyticsWorkspace.id, '')]",
				"enableApplicationInsights": "[if(equals(steps('basics').plan.type, 'Consumption'), false, steps('monitoring').appInsights.enableApplicationInsights)]",
				"tags": "[steps('tags').tags]"
			}
		}
	}
}